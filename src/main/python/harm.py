from __future__ import division

def checkClass(k, a):
    for i in range(k, 1, -1):
        if (a > (1.0/i) and a <= (1.0/(i-1))):
            clas = (i-1)
            break
        else:
            clas = k
    return (clas-1)

def nextFit(weight, n, c):
    res = 1
    bin_rem = c
    for i in range(0, n):
        if (weight[i] > bin_rem):
            res = res + 1
            bin_rem = c - weight[i]
        else:
            bin_rem = bin_rem - weight[i]
    return res

def harmonic(items_normal, cap, k):
    items = [i/cap for i in items_normal]
    bins_k = [] #items divided n classes, list of list
    res_k = [] #bins required in every class
    for i in range(0, k):
        classes = [] #single list
        bins_k.append(classes)
    for item in items:
        clas = checkClass(k, item)
        bins_k[clas].append(item)
    for classes in bins_k:
        if (len(classes) != 0):
            bins = nextFit(classes, len(classes), 1)
        else:
            bins = 0
        res_k.append(bins)
        #print(classes)
    res = 0
    #print(bins_k)
    for i in bins_k:
        print(len(i))
    for r in res_k:
        res = res + r
    print(res_k)
    return res

def main():
    #it = [42,69,67,57,93,90,38,36,45,42,33,79,27,57,44,84]
    it = [42,69,67,57,93,90,38,36,45,42,33,79,27,57,44,84,86,92,46,38,85,33,82,73,49,70,59,23,57,72,74,69,33,42,28,46,30,64,29,74,41,49,55,98,80,32,25,38,82,30,35,39,57,84,62,50,55,27,30,36,20,78,47,26,45,41,58,98,91,96,73,84,37,93,91,43,73,85,81,79,71,80,76,83,41,78,70,23,42,87,43,84,60,55,49,78,73,62,36,44,94,69,32,96,70,84,58,78,25,80,58,66,83,24,98,60,42,43,43,39]
    c = 150
    bins_required = harmonic(it, c, 4)
    #print(len(it))
    print(bins_required)
    #print(nextFit(it, len(it), c))
    #print(checkClass(4, 0.20))
    a = [0.46, 0.44666666666666666, 0.38, 0.38, 0.4866666666666667, 0.4666666666666667, 0.3933333333333333, 0.38, 0.48, 0.49333333333333335, 0.46, 0.4266666666666667, 0.49333333333333335, 0.36666666666666664, 0.38, 0.41333333333333333, 0.36666666666666664, 0.38666666666666666, 0.4866666666666667, 0.4866666666666667, 0.47333333333333333, 0.4666666666666667, 0.4, 0.36666666666666664, 0.4866666666666667, 0.41333333333333333, 0.46, 0.4666666666666667, 0.38666666666666666, 0.38666666666666666, 0.44, 0.4, 0.46, 0.44666666666666666, 0.38, 0.38, 0.4866666666666667, 0.4666666666666667, 0.3933333333333333, 0.38, 0.48, 0.49333333333333335, 0.46, 0.4266666666666667, 0.49333333333333335, 0.36666666666666664, 0.38, 0.41333333333333333, 0.36666666666666664, 0.38666666666666666, 0.4866666666666667, 0.4866666666666667, 0.47333333333333333, 0.4666666666666667, 0.4, 0.36666666666666664, 0.4866666666666667, 0.41333333333333333, 0.46, 0.4666666666666667, 0.38666666666666666, 0.38666666666666666, 0.44, 0.4]
    a1 = [0.24, 0.22, 0.18, 0.22, 0.15333333333333332, 0.22, 0.18666666666666668, 0.2, 0.19333333333333333, 0.21333333333333335, 0.16666666666666666, 0.2, 0.23333333333333334, 0.18, 0.2, 0.24, 0.13333333333333333, 0.17333333333333334, 0.24666666666666667, 0.15333333333333332, 0.24, 0.21333333333333335, 0.16666666666666666, 0.16, 26.28, 0.24, 0.22, 0.18, 0.22, 0.15333333333333332, 0.22, 0.18666666666666668, 0.2, 0.19333333333333333, 0.21333333333333335, 0.16666666666666666, 0.2, 0.23333333333333334, 0.18, 0.2, 0.24, 0.13333333333333333, 0.17333333333333334, 0.24666666666666667, 0.15333333333333332, 0.24, 0.21333333333333335, 0.16666666666666666, 0.16]
    a2 = [0.28, 0.25333333333333335, 0.3, 0.28, 0.29333333333333333, 0.30666666666666664, 0.25333333333333335, 0.32666666666666666, 0.28, 0.30666666666666664, 0.2733333333333333, 0.32666666666666666, 0.25333333333333335, 0.26, 0.3333333333333333, 0.31333333333333335, 0.3, 0.2733333333333333, 0.2866666666666667, 0.2733333333333333, 0.28, 0.2866666666666667, 0.32666666666666666, 0.29333333333333333, 0.28, 0.2866666666666667, 0.2866666666666667, 0.25333333333333335, 0.3, 0.28, 0.29333333333333333, 0.30666666666666664, 0.25333333333333335, 0.32666666666666666, 0.28, 0.30666666666666664, 0.2733333333333333, 0.32666666666666666, 0.25333333333333335, 0.26, 0.3333333333333333, 0.31333333333333335, 0.3, 0.2733333333333333, 0.2866666666666667, 0.2733333333333333, 0.28, 0.2866666666666667, 0.32666666666666666, 0.29333333333333333, 0.28, 0.2866666666666667, 0.2866666666666667, 0.26]
    a3 = [2, 5, 4, 7, 1, 3, 8]
    #print(nextFit(a, len(a), 1))
    #print(nextFit(a1, len(a1), 1))
    #print(nextFit(a2, len(a2), 1))
    #print(nextFit(a3, len(a3), 1))

main()
